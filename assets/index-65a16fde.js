(function () { const r = document.createElement("link").relList; if (r && r.supports && r.supports("modulepreload")) return; for (const e of document.querySelectorAll('link[rel="modulepreload"]')) o(e); new MutationObserver(e => { for (const t of e) if (t.type === "childList") for (const s of t.addedNodes) s.tagName === "LINK" && s.rel === "modulepreload" && o(s) }).observe(document, { childList: !0, subtree: !0 }); function n(e) { const t = {}; return e.integrity && (t.integrity = e.integrity), e.referrerPolicy && (t.referrerPolicy = e.referrerPolicy), e.crossOrigin === "use-credentials" ? t.credentials = "include" : e.crossOrigin === "anonymous" ? t.credentials = "omit" : t.credentials = "same-origin", t } function o(e) { if (e.ep) return; e.ep = !0; const t = n(e); fetch(e.href, t) } })(); let i, l, a, c, d; setInterval(() => { i = new Date, l = i.getHours(), a = i.getMinutes(), c = i.getSeconds(), d = i.getDate(), hour.innerHTML = l, minute.innerHTML = a, second.innerHTML = c, date.innerHTML = d }, 1e3); document.getElementById("set").addEventListener("click", u => {
    u.preventDefault(), document.getElementById("set").style.backgroundColor = "red", setTimeout(() => { document.getElementById("set").style.backgroundColor = "black" }, 5e3); var r = hr.value, n = min.value, o = sec.value; if (console.log("alarm set for => " + r + ":" + n + ":" + o + `
`), r >= l) var e = r - l; else var e = -(l - r); if (n >= a) var t = n - a; else var t = -(a - n); if (o >= c) var s = o - c + 1; else var s = -(c - o) - 1; var f = e * 60 * 60 * 1e3 + t * 60 * 1e3 + s * 1e3; setTimeout(() => { var m = new Audio("/assets/Alarm Beep.mp3"); m.play() }, f)
});
